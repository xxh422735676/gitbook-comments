{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction Flask专用gitbook Copyright © Xianghao Xu 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-11-13 22:00:49 "},"pip使用方法.html":{"url":"pip使用方法.html","title":"pip使用方法","keywords":"","body":"TreeviewCopyright ©xxh all right reserved, powered by aleen42 设置阿里云pip源 Linux系统 Windows系统 手动指定安装源 常用指令 pip命令混乱 pip使用指南 设置阿里云pip源 Linux系统 cd ~ mkdir .pip vim .pip/pip.conf //-------写入------ [global] trusted-host=mirrors.aliyun.com index-url=https://mirrors.aliyun.com/pypi/simple/ //---------------- Windows系统 cd ~ mkdir pip vim pip/pip.inf //--------写入------ [global] index-url=https://mirrors.aliyun.com/pypu/simple/ [install] trusted-host=mirrors.aliyun.com //----------------- 手动指定安装源 pip -i url install package http://pypi.douban.com/ 豆瓣 http://pypi.hustunique.com/ 华中理工大学 http://pypi.sdutlinux.org/ 山东理工大学 http://pypi.mirrors.ustc.edu.cn/ 中国科学技术大学 常用指令 //列出已安装的包 pip freeze pip list //安装requirements.txt pip install -r requirements.txt //升级本地包 pip install -U package //显示包所在的目录 pip show -f //搜索包 pip search //查询可升级的包 pip list -o //打包 pip wheel //覆盖全局安装包重新安装（linux） pip install --user -I pip命令混乱 使用指定虚拟环境下的pip dir\\Scripts\\pip.exe list 去掉中文目录名/目录空格 Copyright © Xianghao Xu 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-11-15 23:01:53 "},"npm使用指南.html":{"url":"npm使用指南.html","title":"npm使用指南","keywords":"","body":"TreeviewCopyright ©xxh all right reserved, powered by aleen42 npm使用指南 npm介绍 npm常用命令 package.json说明 更改npm源 单次临时使用 永久使用 使用cnpm，用淘宝npm镜像 安装 使用cnpm安装模块 同步模块 使用smart-npm，用淘宝npm镜像 安装 卸载 使用 使用nrm 安装 示例 常见问题 [toc] npm使用指南 npm介绍 npm全称为Node Package Manager，是一个基于Node.js的包管理器，也是整个Node.js社区最流行、支持的第三方模块最多的包管理器。至今，npm已经管理约24万个由开发者、公司和社区创建的模块。 npm常用命令 npm init//运行构建新项目的向导 npm install module_name //在项目中安装一个模块 npm install -g module_name //全局方式安装一个模块 npm install module_name –-save //在项目中安装一个模块，并把此模块添加到项目配置文件package.json中，作为项目依赖 npm install module_name –-save-dev //在项目中安装一个模块，并把此模块添加到项目配置文件package.json中，作为项目开发依赖（devDependency） npm list //列出项目中已安装的所有模块 npm list -g //列出系统中全局安装的所有模块 npm remove/uninstall module_name //从项目中移除已安装的模块 npm remove -g module_name //从系统的全局安装中移除已安装的模块 npm remove module_name –save //从项目中移除已安装的模块，并从配置依赖中移除依赖关系 npm remove module_name –save-dev //从项目中移除已安装的模块，并从配置依赖中移除开发依赖（devDependency）关系 npm update module_name //更新指定的已安装模块的版本 npm update -g module_name //更新指定的全局安装模块的版本 npm -v //显示npm包管理器的当前版本 npm login //登陆 npm adduser username //在npmjs.org创建一个账户 npm whoami //显示你在npmjs.org上的账户详细信息 npm publish //发布自己开发的模块到npmjs.org，要发布模块必须先有账户 //列出包 npm ls --depth=0 //最上层包 npm la //简要说明 //缓存目录 npm config get cache //查看缓存 rm -rf ~/.npm/* //清空 其他杂项 配置管理 //设置配置 npm config set [-g|--global] npm set [-g|--global] //查看配置 查看默认配置：npm config list [-l] [--json] npm config list -l npm config ls -l npm c ls -l npm config list --json 查看当前配置： npm config list 查看某一键值：npm config get npm config get tmp npm c get tmp 查看某一键值：npm get npm get tmp //删除配置 npm config delete //编辑配置 npm config edit //编辑全局配置文件：npm config edit --global //编辑局部配置文件：npm config edit 软链管理 //创软链接 cd /f/webMyLib/cssLib-dev-tool npm link //查看软链 npm config get prefix //连软链接 cd f/webMyLib/css-wave npm link cssLib-dev-tool 备注:package-name 是package.json中的名字, 不是目录名字. //现在开发 //断软链接 cd f/webMyLib/css-wave npm unlink cssLib-dev-tool //删除软链 cd /f/webMyLib/cssLib-dev-tool npm unlink //删除有问题的包 npm ls //or npm ls package with error npm uninstall //查看当前配置 npm config ls //清除没有使用的包 npm prune //查看某个包的依赖 npm ll gulp-less --------------------------------设置npm安装程序时的默认目录 // 设置npm全局安装程序时的目录前缀 npm config set prefix \"D:\\Program Files\\nodejs\\X64\\node_global\" // 设置npm安装程序时的缓存位置 npm config set cache \"D:\\Program Files\\nodejs\\X64\\node_cache\" // 设置环境变量NODE_PATH NODE_PATH =D:\\Program Files\\nodejs\\X64\\node_global\\node_modules //or? //NODE_PATH =D:\\Program Files\\nodejs\\X64\\node_global package.json说明 什么是Node.js的模块（module）？在Node.js中，模块是一个库或者框架，也是一个Node.js项目。Node.js项目遵循模块化的架构，当我们创建了一个Node.js项目，意味着创建了一个项目，这个模块的描述文件，被称为package.json package.json内容出错，会导致项目出现bug，阻止项目的运行。package.json的基本结构如下： { \"name\": \"test-project\", \"version\": \"1.0.0\", \"description\": \"test project\", \"private\": true, \"main\": \"app.js\", \"scripts\": { \"test\": \"node test.js\", \"start\": \"node app.js\", \"clean\": \"rm -rf node_modules\" }, \"author\": \"lq\", \"license\": \"ISC\", \"dependencies\": { \"module-1\": \"*\", \"module-2\": \"*\", }, \"devDependencies\": { \"module-2\": \"*\" } } 在有package.json的文件的目录下执行npm install命令后，npm会自动安装dependencies下的模块。 更改npm源 单次临时使用 npm install [name] --registry=https://registry.npm.taobao.org 永久使用 打开C:\\Program Files\\nodejs\\node_modules\\npm\\npmrc，没有的话可以创建一个新的。 增加如下语句： registry=https://registry.npm.taobao.org 也可以在命令行设置 npm configsetregistry https://registry.npm.taobao.org 检测是否成功 npm config get registry npm info express 使用cnpm，用淘宝npm镜像 安装 npm install cnpm -g --registry=https://registry.npm.taobao.org 使用cnpm安装模块 cnpm install [name] 同步模块 cnpm sync [name] cnpm支持 npm 除了 publish 之外的所有命令，也就是不支持publish，当然这并不影响我们使用，publish时换回npm即可，这样也能解决npm install无响应的问题。 使用smart-npm，用淘宝npm镜像 安装 npm install --global smart-npm --registry=https://registry.npm.taobao.org/ //windows用户可能需要如下命令 npm install --global smart-npm@1 --registry=https://registry.npm.taobao.org/ 卸载 npm smart uninstall npm uninstall --global smart-npm 使用 安装后系统的npm会被替换，用npm-original使用原生的npm命令 新的npm会自动根据命令切换registry publish, config, adduser, star 等 ：官方registry 其他命令：淘宝镜像 如果要强制使用官方的registry，需要在命令后面加上--npm npm install jquery --npm 如果要强制使用某个registry，后面添加registry参数 npm install jquery --registry=https://r.cnpmjs.org 如果想修改默认的淘宝镜像或者官方的registry，可以在环境变量中添加这两个参数 NPM_OFFICIAL_REGISTRY,NPM_MIRROR_REGISTRY更多环境变量的配置 使用nrm nrm允许你快速地在如下 NPM 源间切换，现已支持now include: npm, cnpm, taobao,nj(nodejitsu), rednpm。注意：nrm只是一个源管理器，也不能使用publish命令。 安装 npm install -g nrm 示例 USAGE： nrm [options] [command] ls:显示所有的registry use:改变当前的registry add/del:增减registry test [registry]:显示registry的响应时间/所有 $ nrm ls npm ---- https://registry.npmjs.org/ cnpm --- http://r.cnpmjs.org/ * taobao - https://registry.npm.taobao.org/ nj ----- https://registry.nodejitsu.com/ rednpm - http://registry.mirror.cqupt.edu.cn/ npmMirror https://skimdb.npmjs.com/registry/ edunpm - http://registry.enpmjs.org/ $ nrm use cnpm //switch registry to cnpm Registry has been set to: http://r.cnpmjs.org/ 常见问题 //问题：npm 安装出现 UNMET DEPENDENCY 的解决方案 解决： https://lellansin.wordpress.com/2014/02/27/npm-安装出现-unmet-dependency-的解决方案/ //问题：code EINTEGRITY 解决： https://stackoverflow.com/questions/48852553/unable-to-create-new-angular-project-err-code-eintegrity //问题： Unexpected end of JSON input while parsing near '...\":\"^0.1.0\",\"yargs\":\"^' 解决：npm cache clean --force && npm install --registry=https://registry.npm.taobao.org https://blog.csdn.net/csdn_yudong/article/details/79781842 //问题： 莫名其妙的问题 解决： npm install npm -g npm cache clear && rm -rf node_modules && npm install //问题： npm ERR! peer dep missing: ajv@^6.0.0, required by ajv-keywords@3.2.0 解决： npm ll ajv-keywords@3.2.0 npm install ajv@^6.0.0 //问题： 在安装完成我们的npm模块后，根据当时的各软件模版版本情况下载合适的版本到本地，今天安装调试ok，明天很有可能就有新的依赖的版本发布，而这时如果再次执行npm install就有可能下载了不同版本的依赖，很有可能会产生问题！怎么办？ 解决： 方案1 npm install npm shrinkwrap Copyright © Xianghao Xu 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-11-15 22:58:21 "},"gitbook使用指南.html":{"url":"gitbook使用指南.html","title":"gitbook使用指南","keywords":"","body":"TreeviewCopyright ©xxh all right reserved, powered by aleen42 gitbook使用指南 安装gitbook 目录结构 基本目录结构： book.json 基本含义： Summary.md 常用指令 常见问题 no such file... gitbook使用指南 安装gitbook npm install gitbook-cli -g gitbook -V //自动安装gitbook 目录结构 基本目录结构： . ├── book.json ├── README.md ├── SUMMARY.md ├── chapter-1/ | ├── README.md | └── something.md └── chapter-2/ ├── README.md └── something.md book.json 主要存放配置信息 { \"title\": \"Blankj's Glory\", \"author\": \"Blankj\", \"description\": \"select * from learn\", \"language\": \"zh-hans\", \"gitbook\": \"3.2.3\", \"styles\": { \"website\": \"./styles/website.css\" }, \"structure\": { \"readme\": \"README.md\" }, \"links\": { \"sidebar\": { \"我的狗窝\": \"https://blankj.com\" } }, \"plugins\": [ \"-sharing\", \"splitter\", \"expandable-chapters-small\", \"anchors\", \"github\", \"github-buttons\", \"donate\", \"sharing-plus\", \"anchor-navigation-ex\", \"favicon\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/Blankj\" }, \"github-buttons\": { \"buttons\": [{ \"user\": \"Blankj\", \"repo\": \"glory\", \"type\": \"star\", \"size\": \"small\", \"count\": true } ] }, \"donate\": { \"alipay\": \"./source/images/donate.png\", \"title\": \"\", \"button\": \"赞赏\", \"alipayText\": \" \" }, \"sharing\": { \"douban\": false, \"facebook\": false, \"google\": false, \"hatenaBookmark\": false, \"instapaper\": false, \"line\": false, \"linkedin\": false, \"messenger\": false, \"pocket\": false, \"qq\": false, \"qzone\": false, \"stumbleupon\": false, \"twitter\": false, \"viber\": false, \"vk\": false, \"weibo\": false, \"whatsapp\": false, \"all\": [ \"google\", \"facebook\", \"weibo\", \"twitter\", \"qq\", \"qzone\", \"linkedin\", \"pocket\" ] }, \"anchor-navigation-ex\": { \"showLevel\": false }, \"favicon\":{ \"shortcut\": \"./source/images/favicon.jpg\", \"bookmark\": \"./source/images/favicon.jpg\", \"appleTouch\": \"./source/images/apple-touch-icon.jpg\", \"appleTouchMore\": { \"120x120\": \"./source/images/apple-touch-icon.jpg\", \"180x180\": \"./source/images/apple-touch-icon.jpg\" } } } } 基本含义： title：本书标题 author：本书作者 description：本书描述 language：本书语言，中文设置 \"zh-hans\" 即可 gitbook：指定使用的 GitBook 版本 styles：自定义页面样式 structure：指定 Readme、Summary、Glossary 和 Languages 对应的文件名 links：在左侧导航栏添加链接信息 plugins：配置使用的插件 pluginsConfig：配置插件的属性 Summary.md # Summary * [Introduction](README.md) * [Part I](part1/README.md) * [Writing is nice](part1/writing.md) * [GitBook is nice](part1/gitbook.md) * [Part II](part2/README.md) * [We love feedback](part2/feedback_please.md) * [Better tools for authors](part2/better_tools.md) 我们通过使用 标题 或者 水平分割线 将 GitBook 分为几个不同的部分 # Summary ### Part I * [Introduction](README.md) * [Writing is nice](part1/writing.md) * [GitBook is nice](part1/gitbook.md) ### Part II * [We love feedback](part2/feedback_please.md) * [Better tools for authors](part2/better_tools.md) --- * [Last part without title](part3/title.md) 常用指令 gitbook init [name]//初始化 gitbook serve [name] [output] --port //指定端口 gitbook install //安装插件，定义在book.json gitbook build //生成打包书本 常见问题 no such file... 找到C:\\Users\\你的用户名\\.gitbook\\versions\\3.2.3\\lib\\output\\website,把所有的confirm:true改成false Copyright © Xianghao Xu 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-11-15 21:59:09 "},"gitbook插件.html":{"url":"gitbook插件.html","title":"gitbook插件","keywords":"","body":"TreeviewCopyright ©xxh all right reserved, powered by aleen42 gitbook插件 主题插件 theme-defalut主题 theme-comscore主题 API文档 FAQ 文档 Gitbook官方文档备份 配置内容 全局配置 插件列表 plugins 插件属性配置pluginsConfig 一些实用插件 back-to-top-button 回到顶部 导航目录折叠 chapter-fold 左侧目录折叠 expandable-chapters-small 左侧章节目录可折叠 代码复制，行号 code 代码添加行号&复制按钮（可选） copy-code-button 代码块复制按钮 todo 待做项☑ insert-logo 插入logo search pro 高级搜索（支持中文） advanced Emoji - 支持emoji表情 github - 在右上角添加github图标 emphasize为文字加上底色 splitter - 侧边栏宽度可调节 sharing-plus tbfed-pagefooter - 为页面添加页脚 sectionx 将页面分块显示 生成页内目录 page-treeview 生成页内目录 simple-page-toc 生成本页目录 anchor-navigation-ex 悬浮目录和回到顶部 klipse 嵌入类似IDE的功能 gitbook插件 主题插件 theme-defalut主题 theme-default 是 3.0.0 引入的默认主题,大多数插件针对的都是默认主题,如果切换到其他主题或者自定义主题,可能会造成某些情况下不兼容,甚至报错. 默认情况下,左侧菜单不显示层级属性,如果将 showLevel 属性设置为 true 可以显示层级数字. \"pluginsConfig\": { \"theme-default\": { \"showLevel\": true } } theme-comscore主题 default 默认主题是黑白的,而 comscore 主题是彩色的,即标题和正文颜色有所区分. \"plugins\": [ \"theme-comscore\" ] API文档 FAQ 文档 详情查阅 Gitbook官方文档备份 https://snowdreams1006.github.io/gitbook-official/ 介绍一下gitbook中book.json 配置内容 全局配置 title 设置书本的标题 \"title\" : \"Gitbook Use\" author 作者的相关信息 \"author\" : \"mingyue\" description 本书的简单描述 \"description\" : \"记录Gitbook的配置和一些插件的使用\" language Gitbook使用的语言, 版本2.6.4中可选的语言如下： en, ar, bn, cs, de, en, es, fa, fi, fr, he, it, ja, ko, no, pl, pt, ro, ru, sv, uk, vi, zh-hans, zh-tw 例如，配置使用简体中文 \"language\" : \"zh-hans\" links 在左侧导航栏添加链接信息 \"links\" : { \"sidebar\" : { \"Home\" : \"https://www.baidu.com\" } } 12345 styles 自定义页面样式， 默认情况下各generator对应的css文件 \"styles\": { \"website\": \"styles/website.css\", \"ebook\": \"styles/ebook.css\", \"pdf\": \"styles/pdf.css\", \"mobi\": \"styles/mobi.css\", \"epub\": \"styles/epub.css\" } 1234567 例如使`标签有下边框， 可以在website.css`中设置 h1 , h2{ border-bottom: 1px solid #EFEAEA; } 123 插件列表 plugins 配置使用的插件 \"plugins\": [ \"-search\", \"back-to-top-button\", \"expandable-chapters-small\", \"insert-logo\" ] 123456 其中\"-search\"中的 - 符号代表去除默认自带的插件 Gitbook默认自带有5个插件： highlight： 代码高亮 search： 导航栏查询功能（不支持中文） sharing：右上角分享功能 font-settings：字体设置（最上方的\"A\"符号） livereload：为GitBook实时重新加载 插件属性配置pluginsConfig 配置插件的属性 例如配置insert-logo的属性： \"pluginsConfig\": { \"insert-logo\": { \"url\": \"images/logo.png\", \"style\": \"background: none; max-height: 30px; min-height: 30px\" } } 123456 一些实用插件 记录一些实用的插件 用法：在book.json中添加以下内容，然后执行gitbook install back-to-top-button 回到顶部 用法：在book.json中添加以下内容，然后执行gitbook install { \"plugins\": [ \"back-to-top-button\" ] } 12345 导航目录折叠 chapter-fold 左侧目录折叠 支持多层目录，点击导航栏的标题名就可以实现折叠扩展。 插件地址 在book.json中添加以下内容，然后执行gitbook install { \"plugins\": [\"chapter-fold\"] } 123 expandable-chapters-small 左侧章节目录可折叠 支持多层目录，比Toggle Chapters好用 只有点击目录前的箭头才能收放，不如【2.2.1. chapter-fold 左侧目录折叠】好用。 插件地址 用法：在book.json中添加以下内容，然后执行gitbook install { \"plugins\": [ \"expandable-chapters-small\" ] } 12345 代码复制，行号 code 代码添加行号&复制按钮（可选） 为代码块添加行号和复制按钮，复制按钮可关闭 单行代码无行号。 插件地址 用法：在book.json中添加以下内容，然后执行gitbook install { \"plugins\" : [ \"code\" ] } 123 如果想去掉复制按钮，在book.json的插件配置块更新： { \"pluginsConfig\": { \"code\": { \"copyButtons\": false } } } 1234567 copy-code-button 代码块复制按钮 为代码块添加复制的按钮。 插件地址 用法：在book.json中添加以下内容，然后执行gitbook install { \"plugins\": [\"copy-code-button\"] } 123 效果如下图所示： todo 待做项☑ 添加 Todo 功能。默认的 checkbox 会向右偏移 2em，如果不希望偏移，可以在 website.css 里加上下面的代码: input[type=checkbox]{ margin-left: -2em; } 123 插件地址 用法：在book.json中添加以下内容，然后执行gitbook install { \"plugins\": [\"todo\"] } 123 使用示例： * [ ] write some articles * [x] drink a cup of tea 12 insert-logo 插入logo 将logo插入到导航栏上方中 插件地址 用法：在book.json中添加以下内容，然后执行gitbook install { \"plugins\": [ \"expandable-chapters-small\" ], \"pluginsConfig\": { \"insert-logo\": { \"url\": \"images/logo.png\", \"style\": \"background: none; max-height: 30px; min-height: 30px\" } } } 1234567891011 search pro 高级搜索（支持中文） 支持中文搜索, 在使用此插件之前，需要将默认的search和lunr 插件去掉。 插件地址 用法：在book.json中添加以下内容，然后执行gitbook install { \"plugins\": [ \"-lunr\", \"-search\", \"search-pro\" ] } 12345 advanced Emoji - 支持emoji表情 emoij表情列表 插件地址 用法：在book.json中添加以下内容，然后执行gitbook install { \"plugins\": [ \"advanced-emoji\" ] } 12345 github - 在右上角添加github图标 插件地址 用法：在book.json中添加以下内容，然后执行gitbook install { \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/zhangjikai\" } } } 12345678910 效果图： emphasize为文字加上底色 插件地址 用法：在book.json中添加以下内容，然后执行gitbook install { \"plugins\": [ \"emphasize\" ] } 12345 然后在markdown / asciidoc内容中，使用以下内容突出显示一些文本： This text is {% em %}highlighted !{% endem %} This text is {% em %}highlighted with **markdown**!{% endem %} This text is {% em type=\"green\" %}highlighted in green!{% endem %} This text is {% em type=\"red\" %}highlighted in red!{% endem %} This text is {% em color=\"#ff0000\" %}highlighted with a custom color!{% endem %} 12345 效果图： splitter - 侧边栏宽度可调节 插件地址 用法：在book.json中添加以下内容，然后执行gitbook install { \"plugins\": [ \"splitter\" ] } 12345 效果图： sharing-plus 分享当前页面，比默认的 sharing 插件多了一些分享方式。 插件地址 用法：在book.json中添加以下内容，然后执行gitbook install { \"plugins\": [\"-sharing\", \"sharing-plus\"], \"pluginsConfig\": { \"sharing\": { \"douban\": false, \"facebook\": false, \"google\": true, \"line\": true, \"qq\": false, \"qzone\": true, \"weibo\": true, \"whatsapp\": false, \"all\": [ \"douban\", \"facebook\", \"google\", \"hatenaBookmark\", \"instapaper\", \"linkedin\",\"twitter\", \"weibo\", \"messenger\",\"whatsapp\" ] } } } 1234567891011121314151617181920 其中： 为true的代表直接显示在页面顶端，为false的不显示，不写默认为false \"all\"中代表点击分享符号显示出来的 支持网站： \"douban\", \"facebook\", \"google\", \"hatenaBookmark\", \"instapaper\", \"linkedin\",\"twitter\", \"weibo\", \"messenger\",\"qq\", \"qzone\",\"viber\",\"vk\",\"weibo\", \"pocket\", \"stumbleupon\",\"whatsapp\" 1234 效果图： tbfed-pagefooter - 为页面添加页脚 插件地址 用法：在book.json中添加以下内容，然后执行gitbook install { \"plugins\": [ \"tbfed-pagefooter\" ], \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\":\"Copyright &copy zhangjikai.com 2017\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" } } } 123456789101112 sectionx 将页面分块显示 用于将页面分成多个部分，并添加按钮以允许读者控制每个部分的可见性 插件地址 示例地址 用法：在book.json中添加以下内容，然后执行gitbook install { \"plugins\": [ \"sectionx\" ] } 12345 使用方法 内容分块： 在.md文件中定义一个部分（就是插入下面的字段）。 markdown中示例代码： 内容部分2； 123 效果图1： 这里只采用三个参数，其他参数如下所示： 参数 说明 data-title 该部分的标题，它将显示为bootstrap面板的标题（大小为h2）。 请注意，您不能使用\"标题中的字符，请\"改用。 data-id 章节的id，对按钮控制很有用（在下一节中讨论）。 data-show 默认表示面板内容是否可见的布尔值。 true：默认情况下，面板内容对用户可见，面板标题可以单击。 false：默认情况下，面板内容对用户隐藏，面板标题不可点击，只能通过添加自定义按钮查看（在下一节中讨论）。 data-nopdf 一个布尔值，表示该部分是否将隐藏在pdf导出中。 true：面板不会显示在.pdf或.epub中。 data-collapse 一个布尔值，表示默认情况下是否打开（但仍然可见）该部分。 true：默认情况下，面板内容对用户可见，但已关闭。 false：默认情况下，面板内容对用户可见，但已打开（默认设置）。 添加按钮，控制部分可见性 通过在GitBook中添加内联HTML，以下代码可以添加一个按钮，以允许您查看或隐藏其他部分。 简单来说，就是在【使用1】的内容部分添加一个按钮： `` 标签说明： 标签 说明 class 该按钮必须属于类“section”。//这里就是用到 1部分的section target 当按下时，将切换id为target的部分。 show 隐藏目标部分时按钮上的文本。 hide 目标部分可见时按钮上的文本。 markdown中示例代码： 内容部分2 1234 效果图2： \\3. 混合使用 将第2节的button块添加到第1节的内容部分 markdown中示例代码： 内容部分1； 内容部分2 1234567 效果图3： 生成页内目录 page-treeview 生成页内目录 不需要插入标签，能支持到6级目录，安装可用 将以下插件插入到您的book.json并运行gitbook install： { \"plugins\": [\"page-treeview\"] } 123 非必要的配置项： { \"plugins\": [ \"page-treeview\" ], \"pluginsConfig\": { \"page-treeview\": { \"copyright\": \"Copyright &#169; aleen42\", \"minHeaderCount\": \"2\", \"minHeaderDeep\": \"2\" } } } 123456789101112 偷偷地告诉你，这个插件生成目录以后，下面有一行关于版权的文字。如果想去掉的话，找到插件目录下的index.js文件：***/node_modules/gitbook-plugin-page-treeview/lib/index.js 找到大约111行，删除这一行关于var copyRight的定义 下面113行的var insertTreeview中，删除+ copyRight，目前就不显示了 142行中的'copyright': 'Copyright © aleen42',也可以删除 下面161行和163行和111行113行一样的，其实不删除也不显示了。 这个应该不算侵权吧。如果是的话，请联系我。。 simple-page-toc 生成本页目录 需要插入标签，支持1-3级目录 页面顶端生成。另外 GitBook 在处理重复的标题时有些问题，所以尽量不适用重复的标题。 插件地址 用法：在book.json中添加以下内容，然后执行gitbook install { \"plugins\" : [ \"simple-page-toc\" ], \"pluginsConfig\": { \"simple-page-toc\": { \"maxDepth\": 3, \"skipFirstH1\": true } } } 1234567891011 参数 说明 “maxDepth”: 3 使用深度最多为maxdepth的标题。 “skipFirstH1”: true 排除文件中的第一个h1级标题。 使用方法: 在需要生成目录的地方用下面的标签括起来，全文都生成的话就在首尾添加 内容部分 1 anchor-navigation-ex 悬浮目录和回到顶部 添加Toc到侧边悬浮导航以及回到顶部按钮。 自动在标题前生成列表项：\"1. \" \"1.1. \" \"2. \" \"2.2. \" 需要注意以下两点： 本插件只会提取 h[1-3] 标签作为悬浮导航 只有按照以下顺序嵌套才会被提取 # h1 ## h2 ### h3 必须要以 h1 开始，直接写 h2 不会被提取 ## h2 12345 插件地址 { \"plugins\": [ \"anchor-navigation-ex\" ], \"pluginsConfig\": { \"anchor-navigation-ex\": { \"isRewritePageTitle\": true, \"isShowTocTitleIcon\": true, \"tocLevel1Icon\": \"fa fa-hand-o-right\", \"tocLevel2Icon\": \"fa fa-hand-o-right\", \"tocLevel3Icon\": \"fa fa-hand-o-right\" } } } 1234567891011121314 klipse 嵌入类似IDE的功能 嵌入一块功能，可在代码段中实时交互，即（输入代码 > 执行结果 插件地址 Klipse 用法：在book.json中添加以下内容，然后执行gitbook install { \"plugins\": [\"klipse\"] } 123 klipse 目前支持下面的语言： javascript: evaluation is done with the javascript function eval and pretty printing of the result is done with pretty-format clojure[script]: evaluation is done with Self-Hosted Clojurescript ruby: evaluation is done with Opal C++: evaluation is done with JSCPP python: evaluation is done with Skulpt scheme: evaluation is done with BiwasScheme PHP: evaluation is done with Uniter BrainFuck JSX EcmaScript2017 Google Charts: See Interactive Business Report with Google Charts. 下面是一个python的使用示例，其他语言类似，比如（eval-js）： ​```eval-python print[x +1 for x in range（10）] ​ 123 效果如下所示： ![img](gitbook插件.assets/3924ad65d92e21ed0b57e3745daaace5.png) ### donate 打赏插件 文章最下面的按钮，点击可弹出图片 [插件地址](https://plugins.gitbook.com/plugin/donate) 用法：在book.json中添加以下内容，然后执行`gitbook install` { \"plugins\": [ \"donate\" ], \"pluginsConfig\": { \"donate\": { \"wechat\": \"微信收款的二维码URL\", \"alipay\": \"支付宝收款的二维码URL\", \"title\": \"\", \"button\": \"赏\", \"alipayText\": \"支付宝打赏\", \"wechatText\": \"微信打赏\" } } } 123456789101112131415 ### change_girls 可自动切换的背景 添加背景图片，并且可以自动切换 [插件地址](https://github.com/zhenchao125/gitbook-plugin-change_girls) 用法：在book.json中添加以下内容，然后执行`gitbook install` { \"plugins\":[\"change_girls\"], \"pluginsConfig\": { \"change_girls\" : { \"time\" : 10, \"urls\" : [ \"girlUrl1\", \"girlUrl2\",...\"\" ] } } } 1234567891011 字段说明： * time：图片的切换时间，单位是秒 * urls： 一个数组，可以定义多个图片，只能使用互联网上的绝对地址 ### flexible-alerts 警报 这个GitBook插件将块引用转换为漂亮的警报。可以在全局和警报特定级别配置外观，因此输出确实符合您的需求（如下图）。此外，您还可以提供自己的警报类型（比如最后的comment）。 ![图 19](gitbook插件.assets/fa5333dd0c005cfd4100f87b6091e3f2.png) [插件地址](https://plugins.gitbook.com/plugin/flexible-alerts) 这个看上面那个链接里的内容更丰富一点 > 用法： > > 1. 在你的gitbook的book.json文件中，添加flexible-alerts到插件列表。 > 2. 在pluginsConfig中，配置插件以满足您的需求。自定义设置不是必需的。 **简单使用** 1. 用法：在book.json中添加以下内容，然后执行`gitbook install` { \"plugins\": [ \"flexible-alerts\" ] } 12345 1. markdown文件中编辑 简单的markdown文件写法，效果见上图 19 的第一个图： [!NOTE] 这是一个简单的Note类型的使用，所有的属性都是默认值。 12 ``` 上面的[!NOTE]是行匹配模式，默认情况下支持类型NOTE，TIP，WARNING和DANGER。 可以通过提供有效配置来扩展可用类型（请参阅这一节最下面的示例COMMENT） 个性化使用： 在markdown中的个性化语法 > [!type|style:xx|label:xx|icon:xx|className:xx|labelVisibility:xx|iconVisibility:xx] > 内容部分 12 字段介绍，如果不设置的表示选择默认，除了!type都不是必需 键 允许的值 说明 !type NOTE，TIP，WARNING和DANGER 警告级别设置 style 以下值之一: callout（默认）, flat 警告样式，见图19的左右不同 label 任何文字 警告块的标题位置，即Note这个字段位置（不支持中文） icon e.g. ‘fa fa-info-circle’ 一个有效的Font Awesome图标，那块小符号 className CSS类的名称 指定css文件，用于指定外观 labelVisibility 以下值之一：visible（默认），hidden 标签是否可见 iconVisibility 以下值之一：visible（默认），hidden 图标是否可见 对比： > [!NOTE] > 这是一个简单的Note类型的使用，所有的属性都是默认值。 --- > [!NOTE|style:flat|lable:Mylable|iconVisibility:hidden] > \"!type\":`NOTE`、\"style\":`flat`、\"lable\":`自定义标签`、图标不可见 12345 效果： json配置个性化 自定义一个COMMENT类型 用法：在book.json中添加以下内容，然后执行gitbook install { \"plugins\": [ \"flexible-alerts\" ], \"pluginsConfig\": { \"flexible-alerts\": { \"style\": \"callout\", \"comment\": { \"label\": \"Comment\", \"icon\": \"fa fa-comments\", \"className\": \"info\" } } } } 123456789101112131415 示例： > [!COMMENT] > An alert of type 'comment' using style 'callout' with default settings. 12 效果： pageview-count 阅读量计数 插件地址 用法：在book.json中添加以下内容，然后执行gitbook install { \"plugins\": [ \"pageview-count\" ] } 12345 auto-scroll-table 表格滚动条 为避免表格过宽，增加滚动条 插件地址 用法：在book.json中添加以下内容，然后执行gitbook install { \"plugins\": [\"auto-scroll-table\"] } 123 lightbox 单击查看图片 插件地址 在book.json中添加以下内容，然后执行gitbook install { \"plugins\": [\"lightbox\"] } Copyright © Xianghao Xu 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-11-16 00:21:17 "},"virtualenv和wrapper.html":{"url":"virtualenv和wrapper.html","title":"virtualenv和virtualenvwrapper","keywords":"","body":"virtualenv和virtualenvwrapper Copyright © Xianghao Xu 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-11-13 22:57:22 "}}